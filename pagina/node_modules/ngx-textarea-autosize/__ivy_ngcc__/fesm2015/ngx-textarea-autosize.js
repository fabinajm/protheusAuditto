import { __decorate, __metadata } from 'tslib';
import { HostBinding, Input, HostListener, Directive, ElementRef, Renderer2, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import * as ɵngcc0 from '@angular/core';
let AutosizeDirective = class AutosizeDirective {
    constructor(elem, renderer) {
        this.elem = elem;
        this.renderer = renderer;
        this.overflow = 'hidden';
        this.rows = 1;
    }
    ngAfterViewInit() {
        this.resize();
    }
    ngDoCheck() {
        this.resize();
    }
    resize() {
        const textarea = this.elem.nativeElement;
        // Calculate border height which is not included in scrollHeight
        const borderHeight = textarea.offsetHeight - textarea.clientHeight;
        // Reset textarea height to auto that correctly calculate the new height
        this.setHeight('auto');
        // Set new height
        this.setHeight(`${textarea.scrollHeight + borderHeight}px`);
    }
    setHeight(value) {
        this.renderer.setStyle(this.elem.nativeElement, 'height', value);
    }
};
AutosizeDirective.ɵfac = function AutosizeDirective_Factory(t) { return new (t || AutosizeDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };
AutosizeDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AutosizeDirective, selectors: [["textarea", "autosize", ""]], hostVars: 3, hostBindings: function AutosizeDirective_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("input", function AutosizeDirective_input_HostBindingHandler() { return ctx.resize(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("rows", ctx.rows);
        ɵngcc0.ɵɵstyleProp("overflow", ctx.overflow);
    } }, inputs: { rows: "rows" } });
__decorate([
    HostBinding('style.overflow'),
    __metadata("design:type", Object)
], AutosizeDirective.prototype, "overflow", void 0);
__decorate([
    Input(),
    HostBinding('rows'),
    __metadata("design:type", Object)
], AutosizeDirective.prototype, "rows", void 0);
__decorate([
    HostListener('input'),
    __metadata("design:type", Function),
    __metadata("design:paramtypes", []),
    __metadata("design:returntype", void 0)
], AutosizeDirective.prototype, "resize", null);
AutosizeDirective = __decorate([ __metadata("design:paramtypes", [ElementRef, Renderer2])
], AutosizeDirective);

let TextareaAutosizeModule = class TextareaAutosizeModule {
};
TextareaAutosizeModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: TextareaAutosizeModule });
TextareaAutosizeModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function TextareaAutosizeModule_Factory(t) { return new (t || TextareaAutosizeModule)(); }, imports: [[CommonModule]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AutosizeDirective, [{
        type: Directive,
        args: [{
                selector: 'textarea[autosize]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }]; }, { overflow: [{
            type: HostBinding,
            args: ['style.overflow']
        }], rows: [{
            type: Input
        }, {
            type: HostBinding,
            args: ['rows']
        }], resize: [{
            type: HostListener,
            args: ['input']
        }] }); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(TextareaAutosizeModule, { declarations: function () { return [AutosizeDirective]; }, imports: function () { return [CommonModule]; }, exports: function () { return [AutosizeDirective]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TextareaAutosizeModule, [{
        type: NgModule,
        args: [{
                imports: [CommonModule],
                declarations: [AutosizeDirective],
                exports: [AutosizeDirective]
            }]
    }], null, null); })();

/**
 * Generated bundle index. Do not edit.
 */

export { TextareaAutosizeModule, AutosizeDirective as ɵa };

//# sourceMappingURL=ngx-textarea-autosize.js.map